#user  counter;

worker_rlimit_core  500M;

worker_processes  1; # Number of CPUs * 2
pid               logs/nginx.pid;

error_log  logs/error.log;
error_log  logs/notice.log  notice;
error_log  logs/info.log    info;
error_log  logs/crit.log    crit;

events {
    # Best reactor for linux
    use epoll;

    # Determines how many clients will be served by each worker process.
    # # (Max clients = worker_connections * worker_processes)
    # # "Max clients" is also limited by the number of socket connections available
    # # on the system (~64k)
    worker_connections 20000;

    # Accept as many connections as possible, after nginx gets notification about a
    # new connection.
    # # May flood worker_connections, if that option is set too low.
    multi_accept on;
}

# Each connection needs FD or 2 if proxy on
worker_rlimit_nofile    25000;

http {

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # Compression. Reduces the amount of data that needs to be transferred over the network
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 30;

    # Number of requests a client can make over the keep-alive connection.
    keepalive_requests 100000;

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 10;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 2;

    # Sendfile copies data between one FD and other from within the kernel.
    # # More efficient than read() + write(), since the requires transferring data
    # to and from the user space.
    sendfile on;

    # Caches information about open FDs, freqently accessed files.
    # # Changing this setting, in my environment, brought performance up from 560k
    # req/sec, to 904k req/sec.
    # # Recommend using some varient of these options, though not the specific
    # values listed below.
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Off loggin since is slow
    access_log off;

    include       mime.types;
    default_type  application/octet-stream;

    server {
        listen       8081  default;

        autoindex   off;
        server_name___GIVE__ME__A__NAME__;

        location = / {
            return 200 '<html><head></head><body></body></html>';
            add_header Content-Type text/html;
        }

        tnt_endpoint "0:9999"

        location = /ping {
          tnt_ping on;
        }
    }
}
