ngx_addon_name="ngx_http_tnt_module"

__lib_yajl="$ngx_addon_dir/third_party/yajl/build/yajl-2.1.0/lib/libyajl_s.a"

__module_src_dir="$ngx_addon_dir/src"

__include_paths=" \
          $ngx_addon_dir/src                                       \
          $ngx_addon_dir/third_party                               \
          $ngx_addon_dir/third_party/msgpuck                       \
          $ngx_addon_dir/third_party/yajl/build/yajl-2.1.0/include \
          "

__sources=" \
          $__module_src_dir/ngx_http_tnt_module.c   \
          $__module_src_dir/tp_transcode.c          \
          $__module_src_dir/ngx_http_tnt_handlers.c \
          $__module_src_dir/tp_allowed_methods.c    \
          "
__headers=" \
          $__module_src_dir/debug.h                 \
          $__module_src_dir/ngx_http_tnt_handlers.h \
          $__module_src_dir/tp_allowed_methods.h    \
          $__module_src_dir/tp_ext.h                \
          $__module_src_dir/tp_transcode.h          \
          "

if [ ! -n "$ngx_module_link" ]; then
  __old_style_build=no
fi

#
# Old-style build [[
if [ $__old_style_build = yes ]; then

  CORE_INCS=" \
          $CORE_INCS        \
          $ngx_feature_path \
          "

  CORE_LIBS=" \
          $CORE_LIBS        \
          $ngx_feature_libs \
          $__lib_yajl       \
          "

  HTTP_MODULES=" \
          $HTTP_MODULES   \
          $ngx_addon_name \
          "

  NGX_ADDON_SRCS=" \
          $NGX_ADDON_SRCS \
          $__sources      \
          "

  for path in $__include_paths; do
    CFLAGS="$CFLAGS -I$path"
  done
# ]]

# New-style build [[
else

  ngx_module_type=HTTP
  ngx_module_name=$ngx_addon_name
  ngx_module_incs=$__include_paths
  ngx_module_deps=$__headers
  ngx_module_srcs=$__sources
  ngx_module_libs=$__lib_yajl

  . auto/module
# ]]
fi
